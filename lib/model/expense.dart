/// Expense model for our database

/// Sqlite cannot store DateTime objects. You can convert your DateTime to ISO String
/// and save it as a string in sqlite. Then u just parse the string to a DateTime object.
///
/// For the simplicity i used DateTime().millisecondsSinceEpoch()
class Expense {
  final int? id;
  final int date;
  final String name;
  final String category;
  final int cost;
  final String note;

  const Expense({
    /// declare variable corresponding to the above, required & non required, id will be auto generated by sqlite hence we initialize
    this.id,
    required this.date,
    required this.name,
    required this.category,
    required this.cost,
    required this.note,
  });

  factory Expense.fromMap(Map<String, dynamic> json) => Expense(
        /// instructor
        id: json['id'],
        date: json['date'],
        name: json['name'],
        category: json['category'],
        cost: json['cost'],
        note: json['note'],
      );

  /// Convert a Expense into a Map. The keys must correspond to the names of the
  /// columns in the database.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'date': date,
      'name': name,
      'category': category,
      'cost': cost,
      'note': note,
    };
  }

  /// Implement toString to make it easier to see information about
  /// each dog when using the print statement.
  @override
  String toString() {
    return 'Expense{id: $id, date: $date, name: $name, category: $category, cost: $cost, note: $note}';
  }
}
